        // GetContext Method
        // В Model.edmx базы данных --> Context.tt -- > Context.cs при БД уже подключенной
        // MainWindow, OknoAdmina, change
        private static LogisticDatabaseEntities _context;

        public static LogisticDatabaseEntities GetContext()
        {
            if (_context == null)
                _context = new LogisticDatabaseEntities();
            return _context;
        }


        // Авторизация + глобальные данные для входа по роли 

        string login = TextLogin.Text.Trim();
            string password = TextPassword.Password;
            
            try
            {
                using (var context = new DemoLightHzEntities())
                {
                    var user = context.Клиент.FirstOrDefault(u => u.Фамилия == login && u.Имя == password);
                    if(loginAttempts == 3) // попытки входа
                    {
                        TextParol.IsEnabled = false;
                        TextLogin.IsEnabled = false;
                        Vxod.IsEnabled = false;
                        MessageBox.Show("Ошибка");
                    }
                    if (user.sss == true)
                    {
                        MessageBox.Show("Ban");
                        return;  // проверка на бан
                    }
                    if (user != null)
                    {
                        if (user.sss == true) // Если первый вход
                        {
                            var changePassWindow = new change(user);
                            changePassWindow.ShowDialog();

                            // Закрываем окно входа только если пароль успешно изменен
                            if (user.sss == false) // sss - это bit значение в БД
                                this.Close();
                        }
                        else
                        {
                            GlobalVariables.Логин = user.Фамилия;
                            GlobalVariables.Роль = user.Отчество;

                            MessageBox.Show("Вы успешно авторизовались!");
                            OknoAdmina tran = new OknoAdmina();
                            tran.Show();
                            this.Close();
                        }
                        
                    }
                    else
                    {
                        TextLogin.BorderBrush = new SolidColorBrush(Colors.Red);
                        TextParol.BorderBrush = new SolidColorBrush(Colors.Red);
                        MessageBox.Show("Неверный логин или пароль. Данные не найдены!");
                    }

                }

            }
            catch (Exception ex)
            {
                MessageBox.Show("Произошла ошибка при попытке войти: " + ex.Message);
            }


        // глобальные данные добавить отдельно(можно скипнуть, тогда и в кнопке можно по желанию убрать напоминание о глобальных данных)
        public static class GlobalVariables
        {
            public static string Логин { get; set; }
            public static string Роль { get; set; }
        }
        // Если оставить глоб, то в окне админа
            InitializeComponent();
            role.Content = GlobalVariables.Роль;
            RoleText.Content = GlobalVariables.Роль; // название Text = Label в окне
            if (GlobalVariables.Роль == "Сотрудник")
            {
                delete.Background = new SolidColorBrush(Colors.Black); // Перекрас чего либо (Background)
                delete.IsEnabled = false; // Отключение чего либо (delete)

            }
            

        // Вывести данные Окно Админа Xaml

        <DataGrid AutoGenerateColumns="False" IsReadOnly="True" Grid.Row="1" Grid.Column="2"  FontSize="14"
                  Margin="0 10 0 0" x:Name="GridClients" BorderBrush="Black" BorderThickness="1">
            <DataGrid.Columns>
                <DataGridTextColumn Binding="{Binding ID_Пользователь}" Header="ID" Width="*"/>
                <DataGridTextColumn Binding="{Binding Логин}" Header="Логин" Width="*"/>
                <DataGridTextColumn Binding="{Binding Пароль}" Header="Пароль" Width="*"/>
                <DataGridTextColumn Binding="{Binding Роль}" Header="Роль" Width="*"/>
                <DataGridTextColumn Binding="{Binding Первый_вход}" Header="Первый вход" Width="*"/>
                <DataGridTextColumn Binding="{Binding Статус_бана}" Header="Статус бана" Width="*"/>
                <DataGridTextColumn Binding="{Binding Последний_вход}" Header="Последний вход" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>


          // Удаление данных там же на кнопку отдельную

            var drForRemoving = GridClients.SelectedItems.Cast<Пользователь>().ToList();
            if (MessageBox.Show($"Вы точно хотите удалить следующие {drForRemoving.Count()} элементов?", "Внимание",
                MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            {
                try
                {
                    LogisticDatabaseEntities.GetContext().Пользователь.RemoveRange(drForRemoving);
                    LogisticDatabaseEntities.GetContext().SaveChanges();
                    MessageBox.Show("Все данные удалены!");
                    GridClients.ItemsSource = LogisticDatabaseEntities.GetContext().Пользователь.ToList();
                }
                catch (System.Data.Entity.Infrastructure.DbUpdateException)
                {
                    MessageBox.Show("Ошибка при удалении: есть связанные записи в базе данных");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка: {ex.Message}");
                }
            }

  // Добавление с выводом в Окне админа 

  public ClientsWindow()
    {
        InitializeComponent();
        LoadData(); <-- Добавить это
    }

    private void LoadData()
    {
        GridClients.ItemsSource = LogisticDatabaseEntities.GetContext().Пользователь.ToList();
    }

    // Добавление
        private void AddButton_Click(object sender, RoutedEventArgs e)
        {
            try 
            {
                // Проверка на пустые поля
                if (string.IsNullOrWhiteSpace(NameTextBox.Text) ||
                    string.IsNullOrWhiteSpace(PasswordTextBox.Text) ||
                    string.IsNullOrWhiteSpace(kolTextBox.Text) ||
                    string.IsNullOrWhiteSpace(solpTextBox.Text) ||   
                    string.IsNullOrWhiteSpace(anotherTextBox.Text) ||
                    string.IsNullOrWhiteSpace(DateTextBox.Text))
                {
                    MessageBox.Show("Все поля должны быть заполнены!");
                    return; // Прерываем выполнение метода
                }
        
                var newClient = new Клиент 
                {
                    Логин = NameTextBox.Text.Trim(),
                    Пароль = PasswordTextBox.Text.Trim(),
                    Роль = kolTextBox.Text.Trim(),
                    Первый_вход = bool.Parse(solpTextBox.Text.Trim()),   // вводить можно только "1" "0" "true" "false"
                    Бан = bool.Parse(anotherTextBox.Text.Trim()),
                    Дата_входа = DateTime.Parse(DateTextBox.Text.Trim())
                };                                                        // Каждые данные по очереди прописать, в скобках прописывать через запятую(для строки числа и даты разные как видно на примере)  
                
                LogisticDatabaseEntities.GetContext().Пользователь.Add(newClient);
                LogisticDatabaseEntities.GetContext().SaveChanges();
                
                LoadData();  
                NameTextBox.Clear();   // также добавить названия других своих textbox
                PasswordTextBox.Clear();
                DateTextBox.Clear();
                kolTextBox.Clear();
                solpTextBox.Clear();
                anotherTextBox.Clear();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка: {ex.Message}");
            }
        }


        // Кнопка сохранение изменений в таблице

        private void Button_Click_1(object sender, RoutedEventArgs e)
        {
            try
            {
                var context = DemoLightHzEntities.GetContext();
                var changedEntries = context.ChangeTracker.Entries<Клиент>()
                    .Where(x => x.State == EntityState.Modified).ToList();

                foreach (var entry in changedEntries)
                {
                    // Валидация
                    if (string.IsNullOrWhiteSpace(entry.Entity.Фамилия))
                    {
                        MessageBox.Show("Логин не может быть пустым!");
                        return;
                    }
                }

                context.SaveChanges();
                MessageBox.Show("Сохранено успешно!");
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка: {ex.Message}");
            }
        }



        // Смена пароля полный код 

        
        private Клиент _user;
        public change(Клиент _user)
        {
            InitializeComponent();
            _user = user;
            Title = $"Смена пароля для {user.Логин}";
        }


        private void SaveButton_Click(object sender, RoutedEventArgs e)
        {
            if (NewPasswordBox.Password != ConfirmPasswordBox.Password)
            {
                MessageBox.Show("Пароли не совпадают");
                return;
            }

            _user.Пароль = NewPasswordBox.Password;
            _user.sss = false; // Отмечаем что пароль изменен

            try
            {
                GetContext().SaveChanges();
                MessageBox.Show("Пароль успешно изменен");

                // Открываем главное окно
                MainWindow mainWindow = new MainWindow(_user);
                mainWindow.Show();
                this.Close();
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Ошибка: {ex.Message}");
            }
        }


        // смена пароля xaml
        
        <StackPanel Margin="10">
            <TextBlock Text="Новый пароль:" Margin="0,5"/>
            <PasswordBox x:Name="NewPasswordBox" Margin="0,5"/>

            <TextBlock Text="Подтвердите пароль:" Margin="0,5"/>
            <PasswordBox x:Name="ConfirmPasswordBox" Margin="0,5"/>

            <Button Content="Сохранить" Click="SaveButton_Click" Margin="0,15" Padding="10,3"/>
        </StackPanel>
