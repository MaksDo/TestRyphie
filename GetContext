        // GetContext Method
        // В tt.cs при БД подключенной

        private static LogisticDatabaseEntities _context;

        public static LogisticDatabaseEntities GetContext()
        {
            if (_context == null)
                _context = new LogisticDatabaseEntities();
            return _context;
        }


        // Авторизация + глобальные данные для входа по роли 

        string login = TextLogin.Text.Trim();
            string password = TextPassword.Password;
            
            try
            {
                using(var context = new LogisticDatabaseEntities())
                {
                    var user = context.Пользователь.FirstOrDefault(u => u.Логин == login && u.Пароль == password);
                    if(user != null)
                    {
                            GlobalVariables.Логин = user.Логин;
                            GlobalVariables.Роль = user.Роль;

                            MessageBox.Show("Вы успешно авторизовались! Права аккаунта: " + user.Роль);
                            TransitionWindow tran = new TransitionWindow();
                            tran.Show();
                            this.Close(); 
                    }
                    else
                    {
                        TextLogin.BorderBrush = new SolidColorBrush(Colors.Red);
                        TextPassword.BorderBrush = new SolidColorBrush(Colors.Red);
                        MessageBox.Show("Неверный логин или пароль. Данные не найдены!");
                    }
                         
                }

            }
            catch(Exception ex)
            {
                MessageBox.Show("Произошла ошибка при попытке войти: " + ex.Message);
            }


        // глобальные данные добавить отдельно(можно скипнуть, тогда и в кнопке убрать напоминание о глобальных данных)
        public static class GlobalVariables
        {
            public static string Логин { get; set; }
            public static string Роль { get; set; }
        }
        // Если оставить глоб, то в окне админа
            InitializeComponent();

            RoleText.Content = GlobalVariables.Роль; // название Text = Label в окне

            

        // Вывести данные Окно Админа Xaml

        <DataGrid AutoGenerateColumns="False" IsReadOnly="True" Grid.Row="1" Grid.Column="2" Grid.ColumnSpan="9" Grid.RowSpan="5" FontSize="14"
                  Margin="0 10 0 0" x:Name="GridClients" BorderBrush="Black" BorderThickness="1">
            <DataGrid.Columns>
                <DataGridTextColumn Binding="{Binding ID_Клиент}" Header="ID" Width="*"/>
                <DataGridTextColumn Binding="{Binding Контактное_лицо}" Header="Контактное лицо" Width="*"/>
                <DataGridTextColumn Binding="{Binding Телефон}" Header="Телефон" Width="*"/>
                <DataGridTextColumn Binding="{Binding Email}" Header="Email" Width="*"/>
                <DataGridTextColumn Binding="{Binding Название_компании}" Header="Название компании" Width="*"/>
            </DataGrid.Columns>
        </DataGrid>


          // Удаление данных там же на кнопку отдельную

            var drForRemoving = GridClients.SelectedItems.Cast<Клиент>().ToList();
            if (MessageBox.Show($"Вы точно хотите удалить следующие {drForRemoving.Count()} элементов?", "Внимание",
                MessageBoxButton.YesNo, MessageBoxImage.Question) == MessageBoxResult.Yes)
            {
                try
                {
                    LogisticDatabaseEntities.GetContext().Клиент.RemoveRange(drForRemoving);
                    LogisticDatabaseEntities.GetContext().SaveChanges();
                    MessageBox.Show("Все данные удалены!");
                    GridClients.ItemsSource = LogisticDatabaseEntities.GetContext().Клиент.ToList();
                }
                catch (System.Data.Entity.Infrastructure.DbUpdateException)
                {
                    MessageBox.Show("Ошибка при удалении: есть связанные записи в базе данных");
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"Ошибка: {ex.Message}");
                }
            }

  // Добавление с выводом в одном окне 

  public ClientsWindow()
    {
        InitializeComponent();
        LoadData();
    }

    private void LoadData()
    {
        GridClients.ItemsSource = LogisticDatabaseEntities.GetContext().Клиент.ToList();
    }

    // Добавление
    private void AddButton_Click(object sender, RoutedEventArgs e)
    {
        try {
            var newClient = new Клиент 
        {
            Контактное_лицо = NameTextBox.Text,
            Телефон = int.Parse(PhoneTextBox.Text),
            Дата_регистрации = DateTime.Parse(DateTextBox.Text)
        };                                                         // Каждые данные по очереди прописать, в скобках прописывать через запятую(для строки числа и даты разные как видно на примере)
        
            LogisticDatabaseEntities.GetContext().Клиент.Add(newClient);
            LogisticDatabaseEntities.GetContext().SaveChanges();
        
            LoadData(); 
            NameTextBox.Clear(); // также добавить названия других textbox
        }
        catch (Exception ex)
        {
          MessageBox.Show($"Ошибка: {ex.Message}");
        }
        
    }
